import{r as t,o,c as l,a as n,b as e,F as c,d as a}from"./app.8e2ec6d6.js";var r="/java-guide/assets/01_array.68487133.png";const u={},i=n("h1",{id:"arrays",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#arrays","aria-hidden":"true"},"#"),a(" Arrays")],-1),p=n("h2",{id:"what-even-is-an-array",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#what-even-is-an-array","aria-hidden":"true"},"#"),a(" What even is an array?")],-1),d=n("p",null,"An array is a container that holds a fixed number of values of a single type. The length of an array is established when the array is created, and after creation, its length is fixed.",-1),k=n("img",{src:r,alt:"An array with 8 elements."},null,-1),h=n("em",null,"An array of 8 elements.",-1),m=a(" Retrieved from Dev.java: "),b={href:"https://dev.java/N",target:"_blank",rel:"noopener noreferrer"},y=a("https://dev.java/"),g=n("p",null,"Each item in an array is called an element, and each element is accessed by its numerical index. As shown in the preceding illustration, numbering begins with 0. The 6th element, for example, would therefore be accessed at index 5.",-1),_=n("h2",{id:"declaring-a-variable-to-refer-to-an-array",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#declaring-a-variable-to-refer-to-an-array","aria-hidden":"true"},"#"),a(" Declaring a variable to refer to an Array")],-1),v=n("p",null,[a("The code below creates an array named "),n("code",null,"intArray"),a(" with the following line of code.")],-1),w=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" intArray"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),f=a("Simlilar to declarations for variables of other types, an array declaration has two components: the array's type and the array's name. An array's type is written as "),j=n("code",null,"type[]",-1),A=a(", where "),x=n("code",null,"type",-1),T=a(" is the data type of the contained elements, while the brackets are special symbols indicating that this variable holds an array. The size of the array is not part of its type, which is why the brackets are empty. An array's name can be anything you want, provided that it follows the rules and conventions as discussed in the "),O={href:"/1/variables/#variable-naming-conventions",target:"_blank",rel:"noopener noreferrer"},z=a("Variables"),Y=a(" section."),S=n("p",null,"Similarly, you can declare arrays of other types:",-1),F=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"byte"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" anArrayOfBytes"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token keyword"},"short"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" anArrayOfShorts"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token keyword"},"long"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" anArrayOfLongs"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token keyword"},"float"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" anArrayOfFloats"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token keyword"},"double"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" anArrayOfDoubles"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token keyword"},"boolean"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" anArrayOfBooleans"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token keyword"},"char"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" anArrayOfChars"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" anArrayOfStrings"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br")])],-1),B=n("p",null,"Additionally, you can also place the brackets after the array's name:",-1),I=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token class-name"},"Type"),a(" name"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),E=n("p",null,"However, standard convention discourages using this format, since the brackets identify the array type and should usually appear in the type declaration.",-1),L=n("h2",{id:"creating-initializing-and-accessing-an-array",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#creating-initializing-and-accessing-an-array","aria-hidden":"true"},"#"),a(" Creating, Initializing, and Accessing an Array")],-1),N=n("p",null,[a("One way to create an array is with the "),n("code",null,"new"),a(" operator. The code below creates an array with a maximum of 5 integer elements and assigns the array to the anArray variable.")],-1),V=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" anArray "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),C=n("p",null,"You can assign values to each element of the array like so",-1),D=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[a("anArray"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},";"),a(`
anArray`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},";"),a(`
anArray`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br")])],-1),H=n("p",null,"Each array element is accessed by its numerical index:",-1),P=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[a("anArray"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`
anArray`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`
anArray`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br")])],-1),J=n("p",null,"Alternatively, you can use the shortcut syntax to create and initialize an array:",-1),R=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" anArray "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"0"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),U=n("p",null,"Here the length of the array is determined by the number of values provided between the braces and separated by commas.",-1),W=n("p",null,[a("You can also declare an array of arrays (also known as a multidimensional array) by using two or more sets of brackets, such as "),n("code",null,"String[][]"),a(" names. Each element, therefore, must be accessed by a corresponding number of index values.")],-1),q=n("p",null,"In the Java programming language, a multidimensional array is an array whose components are themselves arrays.",-1),G=n("p",null,[a("Finally, you can use the built-in "),n("code",null,"length"),a(" property to determine the size of any array. The following code prints the array's size to standard output:")],-1),K=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),a("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),a("anArray"),n("span",{class:"token punctuation"},"."),a("length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),M=n("h2",{id:"looping-through-elements-in-an-array",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#looping-through-elements-in-an-array","aria-hidden":"true"},"#"),a(" Looping through elements in an Array")],-1),Q=n("p",null,"You might get into a situation where you'd want to get all the elements in an Array. You can do so by using the standard for-loop, or the enhanced for-loop.",-1),X=n("p",null,"Using the standard for-loop:",-1),Z=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"for"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),a(" i "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),a(" i "),n("span",{class:"token operator"},"<"),a(" anArray"),n("span",{class:"token punctuation"},"."),a("length"),n("span",{class:"token punctuation"},";"),a(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
	`),n("span",{class:"token keyword"},"int"),a(" element "),n("span",{class:"token operator"},"="),a(" anArray"),n("span",{class:"token punctuation"},"["),a("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br")])],-1),$=n("p",null,"Or, you can use the enhanced for-loop:",-1),nn=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"for"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),a(" element "),n("span",{class:"token operator"},":"),a(" anArray"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
	`),n("span",{class:"token comment"},"// ..."),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br")])],-1),an=n("p",null,[a("You can use both loops, and they will give the same output, unless you are changing the values inside the loop. If so, you should the standard for-loop, because any changes to the "),n("code",null,"element"),a(" variable will not reflect as changes to the array element, which could be unwanted behavior.")],-1),sn=n("h2",{id:"two-dimensional-arrays",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#two-dimensional-arrays","aria-hidden":"true"},"#"),a(" Two-dimensional Arrays")],-1),en=n("p",null,"This is basically an Array, inside another Array. You can create a two-dimensional array like so:",-1),tn=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" array2d "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token punctuation"},"{"),a(`
	`),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"0"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(`
	`),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"0"),a(),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br")])],-1),on=n("p",null,"Additionally, you can have rows with different lengths.",-1),ln=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" array2d "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token punctuation"},"{"),a(`
	`),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"9"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(`
	`),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br")])],-1),cn=n("p",null,[a("You can also create a 2d Array using the "),n("code",null,"new"),a(" operator.")],-1),rn=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" array2d "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),un=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"TIP"),n("p",null,"For simplicity, we can imagine this two-dimensional array as rows and columns on a spreadsheet."),n("p",null,"You can imagine"),n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" array2d "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])]),n("p",null,"as"),n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" array2d "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token punctuation"},"["),a("rows"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),a("columns"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])])],-1),pn=n("p",null,"Additionally, you can create rows with multiple column lengths by accessing each row property and setting them individually, like so:",-1),dn=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" array2d "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`

array2d`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`
array2d`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br")])],-1),kn=n("p",null,"To access this type of array, it's the same as how'd you access an array normally, with an extra column.",-1),hn=n("p",null,"For example, access the 10th column in the 7th row.",-1),mn=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[a("array2d"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),bn=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"TIP"),n("p",null,[a("Arrays are "),n("strong",null,"zero-indexed"),a(", which means that their starting number is "),n("code",null,"0"),a(". Therefore, the 10th column would be on index "),n("code",null,"9"),a(".")])],-1);function yn(gn,_n){const s=t("OutboundLink");return o(),l(c,null,[i,p,d,k,n("p",null,[h,m,n("a",b,[y,e(s)])]),g,_,v,w,n("p",null,[f,j,A,x,T,n("a",O,[z,e(s)]),Y]),S,F,B,I,E,L,N,V,C,D,H,P,J,R,U,W,q,G,K,M,Q,X,Z,$,nn,an,sn,en,tn,on,ln,cn,rn,un,pn,dn,kn,hn,mn,bn],64)}u.render=yn;export{u as default};
