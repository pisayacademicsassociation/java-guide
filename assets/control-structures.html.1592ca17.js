import{e as n}from"./app.8e2ec6d6.js";const a={},e=n(`<h1 id="control-structures" tabindex="-1"><a class="header-anchor" href="#control-structures" aria-hidden="true">#</a> Control Structures</h1><p>Control structures are statements which allow you to create the logic for your program.</p><p>There are three types of control structures: branching statements, looping statements and jumping statements/keyword.</p><p>A branching statement chooses between two or more possible actions, a looping statement repeats an action until a stopping condition occurs and a jumping statement/keyword transfers the program&#39;s control to a specific location in the code</p><h2 id="if-statement" tabindex="-1"><a class="header-anchor" href="#if-statement" aria-hidden="true">#</a> If statement</h2><h3 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax" aria-hidden="true">#</a> Syntax</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	statement<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If your statement only contains one line, you can remove the curly braces like so</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> statement<span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></div><h3 id="logic" tabindex="-1"><a class="header-anchor" href="#logic" aria-hidden="true">#</a> Logic</h3><p>If the expression <code>condition</code> is <code>true</code>, then <code>statement</code> is executed. Otherwise, it is ignored and the program moves on.</p><h2 id="if-else-statement" tabindex="-1"><a class="header-anchor" href="#if-else-statement" aria-hidden="true">#</a> If-else statement</h2><h3 id="syntax-1" tabindex="-1"><a class="header-anchor" href="#syntax-1" aria-hidden="true">#</a> Syntax</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	onTrueStatement<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	onFalseStatement<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="logic-1" tabindex="-1"><a class="header-anchor" href="#logic-1" aria-hidden="true">#</a> Logic</h3><p>If the expression <code>condition</code> is <code>true</code>, then <code>onTrueStatement</code> is executed. Otherwise, it is ignored and the program executes <code>onFalseStatement</code> instead.</p><h2 id="nested-if-else-statement" tabindex="-1"><a class="header-anchor" href="#nested-if-else-statement" aria-hidden="true">#</a> Nested if-else statement</h2><h3 id="syntax-2" tabindex="-1"><a class="header-anchor" href="#syntax-2" aria-hidden="true">#</a> Syntax</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition_1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>condition_2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Statement_1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token class-name">Statement_2</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>condition_3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Statement_3</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token class-name">Statement_4</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="logic-2" tabindex="-1"><a class="header-anchor" href="#logic-2" aria-hidden="true">#</a> Logic</h3><p>If the expression <code>condition_1</code> is <code>true</code>, it checks if <code>condition_2</code> is <code>true</code>. If <code>condition_2</code> is <code>true</code>, <code>Statement_1</code> is executed, otherwhise <code>Statement_2</code> is executed. If the expression <code>condition_1</code> is <code>false</code>, it checks if <code>condition_3</code> is <code>true</code>. If <code>condition_3</code> is <code>true</code>, <code>Statement_3</code> is executed, otherwise <code>Statement_4</code> is executed.</p><h2 id="if-else-if-statement" tabindex="-1"><a class="header-anchor" href="#if-else-if-statement" aria-hidden="true">#</a> If-else-if statement</h2><h3 id="syntax-3" tabindex="-1"><a class="header-anchor" href="#syntax-3" aria-hidden="true">#</a> Syntax</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	statement1<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>second_condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	statement2<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	statement3<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="logic-3" tabindex="-1"><a class="header-anchor" href="#logic-3" aria-hidden="true">#</a> Logic</h3><p>If the expression <code>condition</code> is <code>true</code>, <code>statement1</code> is executed. Otherwise, checks if <code>second_condition</code> is <code>true</code>. If <code>second_condition</code> is <code>true</code>, <code>statement2</code> is executed. If <code>second_condition</code> is <code>false</code>, executes <code>statement3</code>.</p><h2 id="switch-statement" tabindex="-1"><a class="header-anchor" href="#switch-statement" aria-hidden="true">#</a> Switch statement</h2><h3 id="syntax-4" tabindex="-1"><a class="header-anchor" href="#syntax-4" aria-hidden="true">#</a> Syntax</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>variable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token class-name">Case1</span><span class="token operator">:</span>
		statement_1<span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token class-name">Case2</span><span class="token operator">:</span>
		statement_2<span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token class-name">Case3</span><span class="token operator">:</span>
		statement_3<span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">default</span><span class="token operator">:</span>
		default_statement<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="logic-4" tabindex="-1"><a class="header-anchor" href="#logic-4" aria-hidden="true">#</a> Logic</h3><p>If <code>variable</code> is equal to <code>Case1</code>, executes <code>statement_1</code>, if <code>variable</code> is equal to <code>Case2</code>, executes <code>statement_2</code>, if <code>variable</code> is equal to <code>Case3</code>, executes <code>statement_3</code>, otherwise, executes <code>default_statement</code>.</p><p>The <code>break</code> keyword is used to end the current case statement. If omitted, it will continue down until it sees the <code>break</code> keyword. For example:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>variable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token class-name">Case1</span><span class="token operator">:</span>
		statement_1<span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token class-name">Case2</span><span class="token operator">:</span>
		statement_2<span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token class-name">Case3</span><span class="token operator">:</span>
		statement_3<span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token class-name">Case4</span><span class="token operator">:</span>
		statement_4<span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">default</span><span class="token operator">:</span>
		default_statement<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>If <code>variable</code> is equal to <code>Case1</code>, then <code>statement_1</code>, <code>statement_2</code> and <code>statement_3</code> is executed. It does not execute <code>statement_4</code> because it has already seen the <code>break</code> keyword, which breaks out of the switch case.</p><h2 id="try-catch" tabindex="-1"><a class="header-anchor" href="#try-catch" aria-hidden="true">#</a> Try-Catch</h2><h3 id="syntax-5" tabindex="-1"><a class="header-anchor" href="#syntax-5" aria-hidden="true">#</a> Syntax</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
	statement_1<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	statement_2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="logic-5" tabindex="-1"><a class="header-anchor" href="#logic-5" aria-hidden="true">#</a> Logic</h3><p>Executes <code>statement_1</code>. If <code>statement_1</code> throws an <code>Exception</code>, halts execution of <code>statement_1</code> and then executes <code>statement_2</code>.</p><h2 id="try-catch-finally" tabindex="-1"><a class="header-anchor" href="#try-catch-finally" aria-hidden="true">#</a> Try-Catch-Finally</h2><h3 id="syntax-6" tabindex="-1"><a class="header-anchor" href="#syntax-6" aria-hidden="true">#</a> Syntax</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
	statement_1<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	statement_2<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
	statement_3<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="logic-6" tabindex="-1"><a class="header-anchor" href="#logic-6" aria-hidden="true">#</a> Logic</h3><p>Executes <code>statement_1</code>. If <code>statement_1</code> throws an <code>Exception</code>, halts execution of <code>statement_1</code> and then executes <code>statement_2</code>. Once the execution of <code>statement_1</code> or <code>statement_2</code> finishes, executes <code>statement_3</code>.</p><h2 id="ternary-operator" tabindex="-1"><a class="header-anchor" href="#ternary-operator" aria-hidden="true">#</a> Ternary operator</h2><p>The ternary operator can be used in place of an if-else statement for variable values.</p><h3 id="syntax-7" tabindex="-1"><a class="header-anchor" href="#syntax-7" aria-hidden="true">#</a> Syntax</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>condition <span class="token operator">?</span> onTrue <span class="token operator">:</span> onFalse<span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="logic-7" tabindex="-1"><a class="header-anchor" href="#logic-7" aria-hidden="true">#</a> Logic</h3><p>If the expression <code>condition</code> is <code>true</code>, <code>onTrue</code> will become the value, otherwise <code>onFalse</code> will become the value.</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><p>This:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> max<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&gt;</span> n2<span class="token punctuation">)</span> max <span class="token operator">=</span> n1<span class="token punctuation">;</span>
<span class="token keyword">else</span> max <span class="token operator">=</span> n2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Can be written like this:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>n1 <span class="token operator">&gt;</span> n2<span class="token punctuation">)</span> <span class="token operator">?</span> n1 <span class="token operator">:</span> n2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="while-statement" tabindex="-1"><a class="header-anchor" href="#while-statement" aria-hidden="true">#</a> While statement</h2><h3 id="syntax-8" tabindex="-1"><a class="header-anchor" href="#syntax-8" aria-hidden="true">#</a> Syntax</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	statement<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="logic-8" tabindex="-1"><a class="header-anchor" href="#logic-8" aria-hidden="true">#</a> Logic</h3><p>While the expression <code>condition</code> is <code>true</code>, executes <code>statement</code>, until <code>condition</code> is <code>false</code>.</p><h2 id="do-while-statement" tabindex="-1"><a class="header-anchor" href="#do-while-statement" aria-hidden="true">#</a> Do-while statement</h2><h3 id="syntax-9" tabindex="-1"><a class="header-anchor" href="#syntax-9" aria-hidden="true">#</a> Syntax</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
	statement<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="logic-9" tabindex="-1"><a class="header-anchor" href="#logic-9" aria-hidden="true">#</a> Logic</h3><p>Executes <code>statement</code> once, then checks if the expression <code>condition</code> is <code>true</code>, If <code>true</code>, executes <code>statement</code> until <code>condition</code> is <code>false</code>.</p><h2 id="for-statement" tabindex="-1"><a class="header-anchor" href="#for-statement" aria-hidden="true">#</a> For statement</h2><h3 id="syntax-10" tabindex="-1"><a class="header-anchor" href="#syntax-10" aria-hidden="true">#</a> Syntax</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>initialization<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	statement<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;amongus&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="logic-10" tabindex="-1"><a class="header-anchor" href="#logic-10" aria-hidden="true">#</a> Logic</h3><p>Executes initialization (this should be an assignment or declaration), then checks if the expression <code>condition</code> is <code>true</code>, If <code>true</code>, executes <code>update</code> (should be an increment or decrement), then <code>statement</code>.</p><h2 id="continue-statement-keyword" tabindex="-1"><a class="header-anchor" href="#continue-statement-keyword" aria-hidden="true">#</a> Continue statement/keyword</h2><p>Skips the remaining code within a loop for that particular iteration.</p><h3 id="syntax-11" tabindex="-1"><a class="header-anchor" href="#syntax-11" aria-hidden="true">#</a> Syntax</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">continue</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>The <code>continue</code> keyword can only be used inside loops.</p></div><h2 id="break-statement-keyword" tabindex="-1"><a class="header-anchor" href="#break-statement-keyword" aria-hidden="true">#</a> Break statement/keyword</h2><p>Immediately exits the loop, continuing execution to the first line of code after the loop&#39;s closing curly brace. If used inside a <code>switch</code> statement, exits out of that case and continues execution to the first line of code after the switch statement&#39;s closing curly brace.</p><h3 id="syntax-12" tabindex="-1"><a class="header-anchor" href="#syntax-12" aria-hidden="true">#</a> Syntax</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">break</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>The <code>break</code> keyword can only be used inside loops or <code>switch</code> statements.</p></div><h2 id="boolean-expressions" tabindex="-1"><a class="header-anchor" href="#boolean-expressions" aria-hidden="true">#</a> Boolean expressions</h2><table><thead><tr><th>Name</th><th style="text-align:center;">Syntax</th><th style="text-align:center;">Examples</th></tr></thead><tbody><tr><td>Equal to</td><td style="text-align:center;">==</td><td style="text-align:center;">answer == &#39;a&#39;</td></tr><tr><td>Not equal to</td><td style="text-align:center;">!=</td><td style="text-align:center;">relax != res</td></tr><tr><td>Greater than</td><td style="text-align:center;">&gt;</td><td style="text-align:center;">expenses &gt; income</td></tr><tr><td>Greater than or equal to</td><td style="text-align:center;">&gt;=</td><td style="text-align:center;">points &gt;= 30</td></tr><tr><td>Less than</td><td style="text-align:center;">&lt;</td><td style="text-align:center;">expenses &lt; income</td></tr><tr><td>Less than or equal to</td><td style="text-align:center;">&lt;=</td><td style="text-align:center;">points &lt;= 30</td></tr></tbody></table>`,83);function s(t,c){return e}a.render=s;export{a as default};
